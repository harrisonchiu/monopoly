# Inspired by https://github.com/googleapis/google-cloud-cpp/blob/main/.clang-tidy

# Explanation for why some checks are disabled:
#
# @readability-identifier-length: we have short names such as @id
# @modernize-use-nodiscard: good practice to use it but it is too much visual noise
#   and often times I don't care if the return value is discarded. It should only be
#   put in places where the lack of taking the value actually leads to bad behaviour
Checks: >
    modernize-*,
    cppcoreguidelines-*,
    hicpp-*,
    misc-*,
    readability-*,
    portability-*,
    performance-*,
    clang-analyzer-*,
    bugprone-*,
    cert-*,
    llvm-*,
    -readability-identifier-length,
    -modernize-use-nodiscard

# Naming style is based on Rust. OR C++ standard library code with CamelCase classes, enums, etc.
# Do NOT use Hungarian notation or any prefix/suffix except for _ where appropriate?
# Below should be all clang-tidy (v17.0.0git) readability-identifier-naming checks
#   except for prefix/suffix/ignoreRegex
#
# Exception 1: constexpr/const/static variables in C++ (loosely equivalent to Rust's const)
#   are not UPPER_CASE, but are kept lower_case. This is because C++ is different to
#   Rust's const are C++ should be treated  like other variables. Many C++ variables are const
#   to prevent unneeded mutability, so many variables would end up UPPER_CASE; it is an unneeded
#   highlight in the code.
# @TypeAliasCase and @TypedefCase are not checked because both lower_case and CamelCase
#   are acceptable. lower_case for more simple types akin to literal types. CamelCase for types
#   similar to enums, classes, and structs. Prefer lower_case if no preference.
CheckOptions:
- { key: readability-identifier-naming.AbstractClassCase, value: CamelCase }
- { key: readability-identifier-naming.AggressiveDependentMemberLookup, value: false }
- { key: readability-identifier-naming.ClassCase, value: CamelCase }
- { key: readability-identifier-naming.ClassConstantCase, value: lower_case }
- { key: readability-identifier-naming.ClassMemberCase, value: lower_case }
- { key: readability-identifier-naming.ClassMethodCase, value: lower_case }
- { key: readability-identifier-naming.ConstantCase, value: lower_case }
- { key: readability-identifier-naming.ConstantMemberCase, value: lower_case }
- { key: readability-identifier-naming.ConstantParameterCase, value: lower_case }
- { key: readability-identifier-naming.ConstantPointerParameterCase, value: lower_case }
- { key: readability-identifier-naming.ConstexprFunctionCase, value: lower_case }
- { key: readability-identifier-naming.ConstexprMethodCase, value: lower_case }
- { key: readability-identifier-naming.ConstexprVariableCase, value: lower_case }
- { key: readability-identifier-naming.EnumCase, value: CamelCase }
- { key: readability-identifier-naming.EnumConstantCase, value: CamelCase }
- { key: readability-identifier-naming.FunctionCase, value: lower_case }
- { key: readability-identifier-naming.GetConfigPerFile, value: true }
- { key: readability-identifier-naming.GlobalConstantCase, value: UPPER_CASE }
- { key: readability-identifier-naming.GlobalConstantPointerCase, value: UPPER_CASE }
- { key: readability-identifier-naming.GlobalFunctionCase, value: lower_case }
- { key: readability-identifier-naming.GlobalPointerCase, value: UPPER_CASE }
- { key: readability-identifier-naming.GlobalVariableCase, value: UPPER_CASE }
- { key: readability-identifier-naming.IgnoreMainLikeFunctions, value: false }
- { key: readability-identifier-naming.InlineNamespaceCase, value: lower_case }
- { key: readability-identifier-naming.LocalConstantCase, value: lower_case }
- { key: readability-identifier-naming.LocalConstantPointerCase, value: lower_case }
- { key: readability-identifier-naming.LocalPointerCase, value: lower_case }
- { key: readability-identifier-naming.LocalVariableCase, value: lower_case }
- { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE }
- { key: readability-identifier-naming.MemberCase, value: lower_case }
- { key: readability-identifier-naming.MethodCase, value: lower_case }
- { key: readability-identifier-naming.NamespaceCase, value: lower_case }
- { key: readability-identifier-naming.ParameterCase, value: lower_case }
- { key: readability-identifier-naming.ParameterPackCase, value: lower_case }
- { key: readability-identifier-naming.PointerParameterCase, value: lower_case }
- { key: readability-identifier-naming.PrivateMemberCase, value: lower_case }
- { key: readability-identifier-naming.PrivateMethodCase, value: lower_case }
- { key: readability-identifier-naming.ProtectedMemberCase, value: lower_case }
- { key: readability-identifier-naming.ProtectedMethodCase, value: lower_case }
- { key: readability-identifier-naming.PublicMemberCase, value: lower_case }
- { key: readability-identifier-naming.PublicMethodCase, value: lower_case }
- { key: readability-identifier-naming.ScopedEnumConstantCase, value: CamelCase }
- { key: readability-identifier-naming.StaticConstantCase, value: lower_case }
- { key: readability-identifier-naming.StaticVariableCase, value: lower_case }
- { key: readability-identifier-naming.StructCase, value: CamelCase }
- { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase }
- { key: readability-identifier-naming.TemplateTemplateParameterCase, value: CamelCase }
# - { key: readability-identifier-naming.TypeAliasCase, value: CamelCase }
# - { key: readability-identifier-naming.TypedefCase, value: lower_case }
- { key: readability-identifier-naming.TypeTemplateParameterCase, value: CamelCase }
- { key: readability-identifier-naming.UnionCase, value: CamelCase }
- { key: readability-identifier-naming.ValueTemplateParameterCase, value: CamelCase }
- { key: readability-identifier-naming.VariableCase, value: lower_case }
- { key: readability-identifier-naming.VirtualMethodCase, value: lower_case }
